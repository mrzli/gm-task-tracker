datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique @db.VarChar(256)
  password   String      @db.VarChar(256)
  userRoles  UserRole[]
  tasks      Task[]
  authTokens AuthToken[]
}

model UserRole {
  userId Int
  user   User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([userId, roleId])
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique @db.VarChar(128)
  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model RolePermission {
  roleId       Int
  role         Role       @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([roleId, permissionId])
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique @db.VarChar(128)
  rolePermissions RolePermission[]
}

model AuthToken {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  token          String   @unique @db.Char(40)
  expirationDate DateTime
}

model Task {
  id     Int    @id @default(autoincrement())
  userId Int
  user   User   @relation(fields: [userId], references: [id], onUpdate: Restrict, onDelete: Restrict)
  text   String @db.VarChar(512)
}
